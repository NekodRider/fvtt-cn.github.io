<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FoundryVTT 中文社区 – 服务器部署入门</title><link>https://fvtt-cn.github.io/deployment/gettingstarted/</link><description>Recent content in 服务器部署入门 on FoundryVTT 中文社区</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://fvtt-cn.github.io/deployment/gettingstarted/index.xml" rel="self" type="application/rss+xml"/><item><title>Deployment: 云服务器挑选/购买指南</title><link>https://fvtt-cn.github.io/deployment/gettingstarted/cloud/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fvtt-cn.github.io/deployment/gettingstarted/cloud/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>云服务器挑选和购买指南，&lt;em>利益无关&lt;/em>&lt;/p>
&lt;/div>
&lt;h2 id="选购建议">选购建议&lt;/h2>
&lt;h3 id="配置">配置&lt;/h3>
&lt;p>以当前的 FVTT 运行情况看，如果服务器上只运行 FVTT，那么 1G 内存的 Linux 服务器和 2G 内存的 Windows 服务器足够使用。&lt;/p>
&lt;p>CPU 核心数尽管对运行效率有直接影响，但单核心也足以满足多人游玩 FVTT。&lt;/p>
&lt;p>最重要的因素其实是带宽，如果购买 1Mbps 带宽的服务器用来跑 5 个人的团，意味着每个人在游玩时仅能分配到 200 Kbps = 25 KB/s。
如果一个新场景内的地图 2.5M 大小，则所有玩家平均需要等待 100 秒来下载完毕整张地图，更不必提还需要下载其他资源。&lt;/p>
&lt;p>通常认为，运行 FVTT 的服务器带宽最好要在 &lt;strong>5Mbps 以上&lt;/strong>（越高越好）。&lt;/p>
&lt;p>&lt;strong>然而&lt;/strong>，云服务的按带宽计费的价格非常高，如果要提升到 5+Mbps 往往需要远高于其他配置的成本，并且会造成闲时带宽的浪费。如果可以接受按流量计费（每 GB 一般 0.8 元上下），则带宽大小本身不会被计费，可以设置到 100+Mbps，运行 FVTT 绰绰有余。&lt;/p>
&lt;h3 id="系统">系统&lt;/h3>
&lt;p>参见&lt;a href="../#%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94">部署方式对比&lt;/a>。&lt;/p>
&lt;p>&lt;em>值得注意的是，Docker 部署方式可使用任意一个主流的 Linux 发行版作为操作系统。&lt;/em>&lt;/p>
&lt;h3 id="地域">地域&lt;/h3>
&lt;p>云服务器的数据中心地理位置可能是最能直接影响体验的 &lt;em>非直观&lt;/em> 要素，需要斟酌。&lt;/p>
&lt;p>数据中心的地理位置，可以决定以下几个重要的判断要素：&lt;/p>
&lt;ul>
&lt;li>网络连接质量
&lt;ul>
&lt;li>墙内玩家占多数，甚至全部都是，那最好选择大陆或者香港的云服务，或者其他 CN2 线路服务器；反之全部都在境外的话，强烈建议选择境外云服务&lt;/li>
&lt;li>如果境内外玩家都有，可以考虑在香港部署，大多数的香港数据中心对境内外的访问质量都还算不错&lt;/li>
&lt;li>考虑玩家时也要注意，FVTT 一次部署可以一直使用。如果一直使用且玩家变动很大，GM 可以只考虑自己的访问质量，或者求助万能的香港&lt;/li>
&lt;li>尽管境内服务器对墙内玩家提供了更优质的访问质量，但同时也因为墙的存在，更难以下载位于境外服务器上的 FVTT 的游戏系统、MOD 等&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>域名、备案
&lt;ul>
&lt;li>境内云服务器上，如果提供有域名的网页服务（直接访问 IP 并使用其他端口除外），则一定需要备案才能访问&lt;/li>
&lt;li>境外（比如香港）的云服务器，不需要备案即可提供域名访问&lt;/li>
&lt;li>如果在境内购买云服务，域名最好在同一家云服务提供商处购买；如果在境外，域名可以在 GoDaddy 或境内的云服务提供商购买&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>价格
&lt;ul>
&lt;li>境内云服务比境外贵不少，配置、带宽的价格都要高&lt;/li>
&lt;li>考虑学生机的价格，如果能购买学生机，价格远比正常购买便宜，但往往会因此只能购买位于境内的固定地理位置的数据中心（参见&lt;a href="#%E5%AD%A6%E7%94%9F%E6%9C%BA">学生机&lt;/a>）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="厂商">厂商&lt;/h3>
&lt;p>厂商虽然对使用云服务的体验影响很大，但没必要比较性能（FVTT 不太吃性能），也不必评论谁好谁坏&lt;/p>
&lt;p>主流购买选择：&lt;/p>
&lt;blockquote>
&lt;p>境内：阿里云、腾讯云&lt;/p>
&lt;p>境外：阿里云（香港为主）、 AWS、 Azure、搬瓦工&lt;/p>
&lt;/blockquote>
&lt;h3 id="学生机">学生机&lt;/h3>
&lt;p>阿里云、腾讯云、百度云等等，会对国内学生提供学生优惠。&lt;/p>
&lt;p>这些学生机面向大学生推出，一般年龄不超过 24 岁的用户都可以享受折扣，使得一台单核心 2GB 内存的服务器仅需 10 元/月或更低，拿来开 FVTT 服务器正好。&lt;/p>
&lt;p>但&lt;strong>需要注意&lt;/strong>以下的坑：&lt;/p>
&lt;ul>
&lt;li>带宽：不少学生机默认只给 1Mbps 的带宽，正如上文所提到的那样，用来运行 FVTT 只会让你怀疑人生&lt;/li>
&lt;li>某某云：某某云的学生机目前只有 ARM 架构的 CPU 可选。如果你对 Linux 没有太多使用经验，你可能会怀疑买了假服务器&lt;/li>
&lt;/ul>
&lt;p>一般提到学生机，都会购买国内的。但如果不嫌麻烦的话（需要通过国际学生认证，或教育邮箱认证），国际上的学生优惠，可选项会很多：&lt;/p>
&lt;p>比如通过 GitHub 学生认证，可以获得：&lt;/p>
&lt;ul>
&lt;li>DigitalOcean 学生优惠（送 50 刀，单核 1G 配置，可以购买 10 个月）&lt;/li>
&lt;li>Azure 学生优惠（送 100 刀，单核 1G 配置的香港服务器，可以购买 9 个月）&lt;/li>
&lt;li>Namecheap 的域名一年&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;p>如果认证无法通过，那境内最好的选择可能就是阿里云轻量应用服务器，简单直接没有别的套路，5Mbps 还算能用，每个月 1TB 的流量跑 FVTT 管够。&lt;/p>
&lt;h2 id="其他问题">其他问题&lt;/h2>
&lt;p>除了选购以外，使用云服务器过程中也可能遇到其他问题。&lt;/p>
&lt;h3 id="部署完毕后无法访问">部署完毕后无法访问&lt;/h3>
&lt;p>无论使用那种方式部署，完毕后，如果无法访问，常常是因为云服务器的防火墙设置，尚未放行 FVTT 正在使用的端口。&lt;/p>
&lt;p>一般来说，如果设置了域名并反代，需要设置&lt;strong>入方向&lt;/strong>的端口 80, 443 开放。&lt;/p>
&lt;p>而如果只是使用 30000 端口或者修改的其他端口，只需要设置对应端口在&lt;strong>入方向&lt;/strong>上开放即可。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="../docker/#%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC%E4%B8%AD%E6%96%87%E7%A4%BE%E5%8C%BA-%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B">Docker 部署方式自动脚本&lt;/a>如果不使用域名，文件管理器的网站需要打开入方向 30001 端口。&lt;/p>
&lt;/blockquote>
&lt;p>以下是几种常见的云服务器的防火墙设置方法：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://help.aliyun.com/document_detail/25471.html">阿里云 ECS&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://help.aliyun.com/document_detail/59086.html">阿里云轻量应用服务器&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://cloud.tencent.com/document/product/213/15377">腾讯云 CVM&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://cloud.tencent.com/document/product/1207/44577">腾讯轻量应用服务器&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://docs.microsoft.com/zh-cn/azure/virtual-machines/windows/nsg-quickstart-portal">Azure VM&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://aws.amazon.com/cn/premiumsupport/knowledge-center/connect-http-https-ec2/">AWS EC2&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Deployment: 域名购买/绑定指南</title><link>https://fvtt-cn.github.io/deployment/gettingstarted/domain-name/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fvtt-cn.github.io/deployment/gettingstarted/domain-name/</guid><description>
&lt;h2 id="购买域名">购买域名&lt;/h2>
&lt;p>目前各大云服务提供商基本都提供了域名购买、托管以及 DNS 解析服务，实现一站式服务。&lt;/p>
&lt;p>服务器对域名没有任何要求，但需要注意，如果购买域名并绑定国内服务器使用，则需要备案，而备案对域名后缀（顶级域名）有要求。目前国内云平台购买域名时，如果遇到不能备案的后缀，会提示无法备案，所以注意查看信息就不必担心购买域名之后无法使用的问题。&lt;/p>
&lt;p>使用域名一般有如下要求和步骤：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>选择域名&lt;/strong>，全凭个人喜好，但注册之后无法更换，只能新买&lt;/li>
&lt;li>&lt;strong>付款、续费&lt;/strong>，域名一般按年购买，到期之前需要续费，否则会被回收（不少首年便宜的域名，续费价格很高）&lt;/li>
&lt;li>&lt;strong>实名认证&lt;/strong>，需要填写个人信息并公开，部分域名商可以隐藏域名拥有者实名信息（备案要求必须匹配实名）&lt;/li>
&lt;li>&lt;strong>DNS 解析&lt;/strong>，利用 DNS 解析服务，&lt;a href="#%E7%BB%91%E5%AE%9A%E5%AD%90%E5%9F%9F%E5%90%8D">绑定域名到服务器&lt;/a>或者做其他解析&lt;/li>
&lt;/ul>
&lt;h2 id="备案">备案&lt;/h2>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">可选&lt;/h4>
仅国内服务器架设网站使用域名时需要备案，如果使用境外服务器（含香港），无需备案
&lt;/div>
&lt;p>目前方便的备案方式是通过各个云服务自己的备案渠道申请，这就要求需要在该平台购买云服务器或者域名，所以尽量在一个云服务提供商处解决所有问题，而不要拼凑着买。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://beian.miit.gov.cn/">工信部自行备案&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://beian.aliyun.com/">阿里云备案&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://cloud.tencent.com/product/ba">腾讯云备案&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="绑定子域名">绑定（子）域名&lt;/h2>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
国内服务器未备案无法使用域名来访问网站
&lt;/div>
&lt;p>绑定域名依赖于购买域名的域名提供商和 DNS 服务，各家的界面、操作会有一些不同，但域名的基本管理方式和相关术语是一致的。简单来说，&lt;strong>你需要创建一条 A 记录，映射到你将要安装 FVTT 的服务器的 IP 地址&lt;/strong>。&lt;/p>
&lt;p>如图所示，腾讯云的 DNS 解析管理界面，正在添加的记录便是 &lt;code>foundry.xxx.yyy&lt;/code>（&lt;code>foundry&lt;/code> 是子域名，&lt;code>xxx.yyy&lt;/code> 是你注册的域名），其他 DNS 解析设置界面大同小异，详细可以参见平台自己的帮助。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>主机记录&lt;/strong>填写你想使用的子域名（比如&lt;code>foundry&lt;/code>），或者使用&lt;code>@&lt;/code>来代表直接使用 &lt;code>xxx.yyy&lt;/code> 访问&lt;/li>
&lt;li>&lt;strong>记录类型&lt;/strong>选择 A 记录&lt;/li>
&lt;li>&lt;strong>记录值&lt;/strong>填写需要服务器的 &lt;strong>公网&lt;/strong> IP，其他 IP 无法访问&lt;/li>
&lt;/ul>
&lt;p>其他设置都使用默认设置即可。&lt;/p>
&lt;p>&lt;img src="https://fvtt-cn.github.io/images/deployment/domain-name.png" alt="">&lt;/p></description></item><item><title>Deployment: Ubuntu 部署 FoundryVTT 教程</title><link>https://fvtt-cn.github.io/deployment/gettingstarted/ubuntu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fvtt-cn.github.io/deployment/gettingstarted/ubuntu/</guid><description>
&lt;blockquote>
&lt;p>本篇教程参考 FVTT 英文社群网站 &lt;a href="https://foundry-vtt-community.github.io/wiki/Ubuntu-VM/">Ubuntu VM 部署教程&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>Ubuntu 目前逐步取代了其他发行版，取得了新的大量的市场份额，无论是在桌面端还是在服务器端。这篇教程主要讲述如何在安装了 Ubuntu Server 的服务器上部署 Foundry VTT，并使其保持运行并使用反向代理访问。&lt;/p>
&lt;p>我们会使用 node 的进程管理工具来保证 Foundry VTT 的实例持续运行，而且提供详尽的统计信息，还包括方便的启动、停止、重启命令，以及服务器重启时自动启动 FVTT 的服务。&lt;/p>
&lt;p>如果拥有域名的话，你和玩家们将会从浏览器上输入域名，通过 HTTPS 加密的反向代理访问 FVTT；如果没有使用到域名，也会输入反代后的对应 IP 和端口访问。&lt;/p>
&lt;p>本篇教程介绍的部署方式，不会直接让玩家们访问 FVTT 实例暴露出的端口。这样做可以获得一些反代的优势，同时不会有什么显著的缺点，了解反代的优劣势具体可以参考网上一些介绍反向代理的文章。&lt;/p>
&lt;h2 id="配置服务器环境">配置服务器环境&lt;/h2>
&lt;p>Ubuntu 服务器上运行 FVTT，需要配置好运行环境：&lt;/p>
&lt;ul>
&lt;li>Node.js 运行时，其对应的软件包管理器 npm，以及使用 npm 安装的 pm2（进程管理工具）&lt;/li>
&lt;li>反向代理软件 Caddy，以及其暴露端口的防火墙（比如 80、443）&lt;/li>
&lt;/ul>
&lt;p>首先，假设已经登入了 Ubuntu Server 服务器，并且能够获得 root 权限&lt;/p>
&lt;h3 id="第一步安装-nodejs-npm-和-unzip">第一步：安装 Node.js, npm 和 Unzip&lt;/h3>
&lt;p>运行下面命令（适用于 Ubuntu，其他 Linux 发行版使用的命令可能不一致）：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -sL https://deb.nodesource.com/setup_13.x &lt;span style="color:#000;font-weight:bold">|&lt;/span> sudo -E bash -
sudo apt-get install -y nodejs unzip
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上命令会安装 node.js 以及包管理器 npm。使用 &lt;code>node --version&lt;/code> 和 &lt;code>npm --version&lt;/code> 来确认安装是否成功以及版本号。&lt;/p>
&lt;h3 id="第二步安装-caddy">第二步：安装 Caddy&lt;/h3>
&lt;p>运行以下命令将会安装 Caddy：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -fsSL https://github.com/caddyserver/getcaddy.com/raw/master/index.txt &lt;span style="color:#000;font-weight:bold">|&lt;/span> sudo bash
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来将 Caddy 设置为系统服务：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo groupadd --system caddy
sudo useradd --system --gid caddy --create-home --home-dir /var/lib/caddy --shell /usr/sbin/nologin --comment &lt;span style="color:#4e9a06">&amp;#34;Caddy web server&amp;#34;&lt;/span> caddy
&lt;/code>&lt;/pre>&lt;/div>&lt;p>以上命令将会创建用于启动 Caddy 的 Linux 用户和用户组，接下来将设置好服务：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo wget -O /etc/systemd/system/caddy.service https://github.com/caddyserver/dist/raw/master/init/caddy.service
sudo systemctl &lt;span style="color:#204a87">enable&lt;/span> caddy
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="第三步安装-nodejs-进程管理工具pm2">第三步：安装 Node.js 进程管理工具：pm2&lt;/h3>
&lt;p>使用刚才安装的 npm，全局安装 pm2：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo npm install -g pm2
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="第四步下载-fvtt-并测试">第四步：下载 FVTT 并测试&lt;/h3>
&lt;p>创建 FVTT 使用的目录并切换：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">mkdir ~/foundry &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#204a87">cd&lt;/span> ~/foundry
&lt;span style="color:#204a87">pwd&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>pwd&lt;/code> 命令输出结果应当是 &lt;code>/home/[XXX]/foundry&lt;/code>，&lt;code>[XXX]&lt;/code> 是登录服务器使用的 Linux 用户名。&lt;/p>
&lt;p>从官网上获取 FVTT 下载链接（Linux），在服务器上运行：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">wget https://foundryvtt.s3-us-west-2.amazonaws.com/releases/&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>Key&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>/FoundryVirtualTabletop-linux-x64.zip
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>后面的这段链接替换为从官网处复制到的链接&lt;/strong>&lt;/p>
&lt;p>下载完毕后，解压 FVTT（如果文件名不一致，更换为下载保存的 FVTT 压缩包文件名）：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">unzip FoundryVirtualTabletop-linux-x64.zip
rm FoundryVirtualTabletop-linux-x64.zip
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后测试确认 FVTT 是否能够正常运行：&lt;code>node $HOME/foundry/resources/app/main.js --port=62621&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">FoundryVTT &lt;span style="color:#000;font-weight:bold">|&lt;/span> 2020-07-06 07:48:44 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>info&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Foundry Virtual Tabletop - Version 0.6.5
FoundryVTT &lt;span style="color:#000;font-weight:bold">|&lt;/span> 2020-07-06 07:48:44 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>info&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Running on Node.js - Version 12.18.2
FoundryVTT &lt;span style="color:#000;font-weight:bold">|&lt;/span> 2020-07-06 07:48:44 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>info&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Application Options:
&lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>
&lt;span style="color:#4e9a06">&amp;#34;port&amp;#34;&lt;/span>: 62621,
&lt;span style="color:#4e9a06">&amp;#34;upnp&amp;#34;&lt;/span>: false,
&lt;span style="color:#4e9a06">&amp;#34;fullscreen&amp;#34;&lt;/span>: false,
&lt;span style="color:#4e9a06">&amp;#34;hostname&amp;#34;&lt;/span>: null,
&lt;span style="color:#4e9a06">&amp;#34;routePrefix&amp;#34;&lt;/span>: null,
&lt;span style="color:#4e9a06">&amp;#34;sslCert&amp;#34;&lt;/span>: null,
&lt;span style="color:#4e9a06">&amp;#34;sslKey&amp;#34;&lt;/span>: null,
&lt;span style="color:#4e9a06">&amp;#34;awsConfig&amp;#34;&lt;/span>: null,
&lt;span style="color:#4e9a06">&amp;#34;proxySSL&amp;#34;&lt;/span>: false,
&lt;span style="color:#4e9a06">&amp;#34;proxyPort&amp;#34;&lt;/span>: null
&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果显示类似于上述的输出结果并且没有显示什么错误，证明 FVTT 已经可以正常运行了！&lt;/p>
&lt;p>然后按下 &lt;kbd>Ctrl+C&lt;/kbd> 直接杀掉用来测试的 FVTT 进程，准备进行下一步。&lt;/p>
&lt;h2 id="pm2-运行-fvtt">pm2 运行 FVTT&lt;/h2>
&lt;p>需要的运行环境都已经配置完毕，接下来需要将 pm2 设置为随系统启动，并让 pm2 管理和运行 FVTT 进程。&lt;/p>
&lt;h3 id="pm2-配置为系统服务">pm2 配置为系统服务&lt;/h3>
&lt;p>首先我们要将 pm2 设置为随服务器开机启动。可以使用 pm2 自带的服务文件生成，对于 Ubuntu 系统，执行：&lt;code>pm2 startup&lt;/code>，结果如下：&lt;/p>
&lt;pre>&lt;code>[PM2] Init System found: systemd
[PM2] To setup the Startup Script, copy/paste the following command:
sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u [XXX] --hp /home/[XXX]
&lt;/code>&lt;/pre>&lt;p>它生成了一个命令，即&lt;code>sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u [XXX] --hp /home/[XXX]&lt;/code>这一部分，其中 &lt;code>[XXX]&lt;/code> 会被自动替换为当前登录使用的用户。复制输出的这段命令（而非从网页上复制）并且执行：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>PM2&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>v&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Command successfully executed.
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果输出结果中含有以上这段，基本上 pm2 已经被配置为系统服务。&lt;/p>
&lt;h3 id="pm2-启动-fvtt-并持续运行">pm2 启动 FVTT 并持续运行&lt;/h3>
&lt;p>现在需要使用 pm2 启动 FVTT，并且让 pm2 记住需要保持 FVTT 的运行，如此就可以让 pm2 在每次服务器重启时都会跟随启动，不需要手动。&lt;/p>
&lt;p>使用 pm2 启动 FVTT，还是一样 &lt;code>[xxx]&lt;/code> 替换为登录服务器使用的用户名：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">pm2 start &lt;span style="color:#4e9a06">&amp;#34;node &lt;/span>&lt;span style="color:#000">$HOME&lt;/span>&lt;span style="color:#4e9a06">/foundry/resources/app/main.js&amp;#34;&lt;/span> --name &lt;span style="color:#4e9a06">&amp;#34;foundry&amp;#34;&lt;/span> -- --port&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">8080&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>端口号&lt;code>8080&lt;/code>可以调整，但是后续的端口号都需要对应修改。&lt;/p>
&lt;/blockquote>
&lt;p>运行完毕后，使用 &lt;code>pm2 list&lt;/code> 来查看 pm2 正在管理的进程实例：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>PM2&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Starting /home/&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>XXX&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>/foundry/resources/app/main.js in fork_mode &lt;span style="color:#ce5c00;font-weight:bold">(&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">1&lt;/span> instance&lt;span style="color:#ce5c00;font-weight:bold">)&lt;/span>
&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>PM2&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Done.
┌──────────┬────┬─────────┬──────┬───────┬────────┬─────────┬────────┬─────┬───────────┬────────┬──────────┐
│ App name │ id │ version │ mode │ pid │ status │ restart │ uptime │ cpu │ mem │ user │ watching │
├──────────┼────┼─────────┼──────┼───────┼────────┼─────────┼────────┼─────┼───────────┼────────┼──────────┤
│ foundry │ &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> │ 0.3.2 │ fork │ &lt;span style="color:#0000cf;font-weight:bold">31130&lt;/span> │ online │ &lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> │ 0s │ 0% │ 8.9 MB │ &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>XXX&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> │ disabled │
└──────────┴────┴─────────┴──────┴───────┴────────┴─────────┴────────┴─────┴───────────┴────────┴──────────┘
Use &lt;span style="color:#4e9a06">`&lt;/span>pm2 show &amp;lt;id&lt;span style="color:#000;font-weight:bold">|&lt;/span>name&amp;gt;&lt;span style="color:#4e9a06">`&lt;/span> to get more details about an app
&lt;/code>&lt;/pre>&lt;/div>&lt;p>pm2 会展示如上所示的列表，并且展示大量有用的信息，比如是否运行中，进程重启次数，运行时间， CPU 使用率和内存使用率等等。使用 &lt;code>pm2 show foundry&lt;/code> 可以展示更详尽的关于启动的 FVTT 进程的信息。&lt;/p>
&lt;p>接下来使用 &lt;code>pm2 save&lt;/code>，即可保存配置，令 pm2 记住对 FVTT 进程的管理。&lt;/p>
&lt;ul>
&lt;li>&lt;code>pm2 start foundry&lt;/code> 启动 FVTT&lt;/li>
&lt;li>&lt;code>pm2 stop foundry&lt;/code> 停止 FVTT&lt;/li>
&lt;li>&lt;code>pm2 restart foundry&lt;/code> 重启 FVTT&lt;/li>
&lt;li>&lt;code>pm2 delete foundry&lt;/code> 删除 FVTT 的管理项，不再使用 pm2 管理&lt;/li>
&lt;/ul>
&lt;p>事实上，此处如果 8080 端口防火墙已放行，就应该可以访问了。在自己的浏览器上输入 &lt;code>http://[服务器IP]:8080&lt;/code> 来尝试访问，防火墙放行即可见到 FVTT 的界面；如果不能访问，是好事，因为我们不想开放这个端口。&lt;/p>
&lt;h2 id="设置反向代理">设置反向代理&lt;/h2>
&lt;p>相反，用户应该使用反代来连接，而使用 Caddy 可以简化配置反代的流程。而且，如果用到域名，使用 Caddy 配置 HTTPS 将非常简单，它内置申请 LetsEncrypt 的证书并自动更新的方法，无需额外配置。&lt;/p>
&lt;div class="alert alert-primary" role="alert">
&lt;h4 class="alert-heading">可选&lt;/h4>
&lt;p>&lt;strong>如果使用域名，需要将域名&lt;a href="../domain-name/#%E7%BB%91%E5%AE%9A%E5%AD%90%E5%9F%9F%E5%90%8D">绑定&lt;/a>上&lt;/strong>&lt;/p>
&lt;p>接下来使用到的域名都假定为 &lt;code>my.foundry.com&lt;/code>，记得替换为自己的域名&lt;/p>
&lt;/div>
&lt;p>执行 &lt;code>sudo nano /etc/caddy/Caddyfile&lt;/code>，将会开始编辑 Caddy 的配置文件。使用域名和不使用域名基本配置文件的内容都近似，在命令进入的 nano 界面中，输入以下内容，根据使用域名与否来区分：&lt;/p>
&lt;ul>
&lt;li>不使用域名
&lt;pre>&lt;code>:80 {
reverse_proxy localhost:8080 {
header_up Host {host}
header_up X-Real-IP {remote_host}
header_up X-Forwarded-For {remote_host}
header_up X-Forwarded-Proto {scheme}
}
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>使用域名
&lt;pre>&lt;code>my.foundry.com {
reverse_proxy localhost:8080 {
header_up Host {host}
header_up X-Real-IP {remote_host}
header_up X-Forwarded-For {remote_host}
header_up X-Forwarded-Proto {scheme}
}
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;p>输入或者粘贴完毕后，按下 &lt;kbd>Ctrl+X&lt;/kbd>，接着按 &lt;kbd>y&lt;/kbd> 并且回车，确认保存文件。&lt;/p>
&lt;p>然后启动已经配置好的 Caddy 服务即可：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo systemctl start caddy
&lt;/code>&lt;/pre>&lt;/div>&lt;p>等待一段时间后，通过你设置的域名或者服务器 IP 地址，即可访问已经部署完毕的 FVTT，尽情使用吧。&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
如果无法访问，检查是否开启服务器防火墙的 80/443 端口，这两个端口需要打开
&lt;/div></description></item><item><title>Deployment: CentOS 部署 FoundryVTT 教程</title><link>https://fvtt-cn.github.io/deployment/gettingstarted/centos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fvtt-cn.github.io/deployment/gettingstarted/centos/</guid><description>
&lt;blockquote>
&lt;p>这里介绍&lt;a href="https://www.peatsuki.com/008.html">雙月ひめは的 CentOS 教程&lt;/a>以及其&lt;a href="https://www.peatsuki.com/010.html">一键部署脚本教程&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="脚本部署">脚本部署&lt;/h2>
&lt;p>命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo su root
&lt;span style="color:#204a87">cd&lt;/span>
wget https://www.peatsuki.com/sh/InstallFVTT.sh --no-check-certificate
sh InstallFVTT.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://foundryvtt.com/">官网地址&lt;/a> 登录以购买的账户以获取下载链接。&lt;/p>
&lt;p>然后再选择后台模式中输入 &lt;code>非【P】 以nohup进行后台运行&lt;/code>。&lt;/p>
&lt;p>若需要使用 PM2，需要有足够的基本知识方可使用。&lt;/p>
&lt;p>如需上传文件，需要设置 root 账号密码后使用 SFTP 工具上传，例如 WinSCP 等。&lt;/p>
&lt;hr>
&lt;p>如果因为设置密码造成的系统重启，则需要在远程连接中执行如下内容：（执行后需要等待2-3分钟系统运行即可访问）&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo su root
&lt;span style="color:#204a87">cd&lt;/span>
sh startfvtt.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用脚本在阿里云-centos-机器上部署的教程视频">使用脚本在阿里云 CentOS 机器上部署的教程视频&lt;/h3>
&lt;style>
.aspect-ratio {
position: relative;
width: 100%;
height: 0;
padding-bottom: 75%;
}
.aspect-ratio iframe {
position: absolute;
width: 100%;
height: 100%;
left: 0;
top: 0;
}
&lt;/style>
&lt;div class="aspect-ratio">
&lt;iframe src="https://player.bilibili.com/player.html?bvid=BV1Q54y1v7FX&amp;t=&amp;page=1&amp;as_wide=1&amp;high_quality=1&amp;danmaku=0"
scrolling="no"
frameborder="no"
framespacing="0"
allowfullscreen="true">
&lt;/iframe>
&lt;/div>
&lt;h2 id="手动部署">手动部署&lt;/h2>
&lt;h3 id="0x00-目标服务器">0x00 目标服务器&lt;/h3>
&lt;p>阿里云轻量服务器是一个物美价廉的香港服务器。&lt;/p>
&lt;p>目前定价为 1U1G=24 元、1U2G=34 元。（截至 2020/7/1 日）&lt;/p>
&lt;p>峰值带宽为 30M，流量为 1T-2T 左右。已经足够当我们的服务器使用。&lt;/p>
&lt;p>请注意：由于非大陆地域的虚拟主机提供国际带宽，如在中国大陆使用，会有较大的网络延迟。&lt;/p>
&lt;h3 id="0x01-我的服务器状况">0x01 我的服务器状况&lt;/h3>
&lt;p>我的服务器上已经做了 apache+php+wordpress，并且配置了全域 SSL 和加入 HSTS Preload List。&lt;/p>
&lt;p>经过考虑，我让 FoundryVTT 和这个 wordpress 博客挤一挤。以下制作代码建立在我的环境之下。&lt;/p>
&lt;p>阿里云自带的 WordPress 4.8.1 或许能提供类似环境（不保证）&lt;/p>
&lt;h3 id="0x02-安装nodejs环境来源于官方指导">0x02 安装node.js环境（来源于官方指导）&lt;/h3>
&lt;p>依次运行以下语句&lt;/p>
&lt;pre>&lt;code>sudo yum install -y openssl-devel
curl --silent --location https://rpm.nodesource.com/setup_12.x | sudo bash -
sudo yum install -y nodejs
&lt;/code>&lt;/pre>&lt;h3 id="0x03-创建对应文件夹并下载foundryvtt运作档来源于官方指导">0x03 创建对应文件夹并下载FoundryVTT运作档（来源于官方指导）&lt;/h3>
&lt;p>依次运行以下语句，其中斜线部分需要去你的FoundrtVTT授权页面点击node.js后方的链条按钮获得临时下载地址，并替换斜体部分。&lt;/p>
&lt;pre>
cd $HOME
mkdir foundryvtt
mkdir foundrydata
cd foundryvtt
wget -O foundryvtt.zip "&lt;em>https://foundryvtt.s3.amazonaws.com/releases/0.6.4/foundryvtt-0.6.4.zip&lt;/em>"
unzip foundryvtt.zip
&lt;/pre>
&lt;h3 id="0x04-使用直接运行的方式测试foundrtvtt来源于官方指导">0x04 使用直接运行的方式测试FoundrtVTT（来源于官方指导）&lt;/h3>
&lt;p>运行以下语句并访问你的服务器公网地址测试，例如：&lt;code>http://127.0.0.1:30000&lt;/code>&lt;/p>
&lt;pre>&lt;code>node resources/app/main.js --dataPath=$HOME/foundrydata
&lt;/code>&lt;/pre>&lt;h3 id="0x05-使用pm2创建nodejs值守进程来源于社区指导">0x05 使用PM2创建node.js值守进程（来源于社区指导）&lt;/h3>
&lt;p>依次运行以下语句，安装pm2并创建值守进程&lt;/p>
&lt;pre>&lt;code>cd $home
npm install -g pm2
pm2 start foundrtvtt/resources/app/main.js
&lt;/code>&lt;/pre>&lt;h3 id="0x06-安装ssl证书">0x06 安装SSL证书&lt;/h3>
&lt;pre>&lt;code>cd /foundrydata
mkdir ssl
&lt;/code>&lt;/pre>&lt;p>然后将证书的 crt、key 文件拷贝到 ssl 文件夹下。（建议采用 FTP 方式或者 SFTP 方式）&lt;/p>
&lt;p>打开 FoundryVTT，在 Configuration 中修改以下内容（斜体部分需要根据实际情况修改）&lt;/p>
&lt;ul>
&lt;li>UserDataPath修改为 &lt;em>&lt;code>/root/foundrydata&lt;/code>&lt;/em>&lt;/li>
&lt;li>填写SSL Certifilcate &lt;em>&lt;code>/root/foundrydata/ssl/yourdomain.crt&lt;/code>&lt;/em>&lt;/li>
&lt;li>填写SSL Private Key &lt;em>&lt;code>/root/foundrydata/ssl/yourdomain.key&lt;/code>&lt;/em>&lt;/li>
&lt;/ul>
&lt;p>然后点击 Save Changes 保存配置文件&lt;/p>
&lt;h3 id="0x07配置apache实现反向代理">0x07配置apache实现反向代理&lt;/h3>
&lt;p>修改 &lt;code>/usr/local/apache/conf/httpd.conf&lt;/code> 的内容，添加以下字段：&lt;/p>
&lt;pre>&lt;code>LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_http_module modules/mod_proxy_http.so
LoadModule proxy_connect_module modules/mod_proxy_connect.so
LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so
LoadModule proxy_ftp_module modules/mod_proxy_ftp.so
&lt;/code>&lt;/pre>&lt;p>修改 &lt;code>/usr/local/apache/conf/extra/httpd-ssl.conf&lt;/code> 文件，添加以下字段，其中斜下划线部分需要根据实际情况修改：&lt;/p>
&lt;pre>
&amp;lt;VirtualHost *:443&amp;gt;
ServerName &lt;em>&lt;u>yourdomain.com&lt;/u>&lt;/em>
ServerAlias &lt;em>&lt;u>yourdomain.com&lt;/u>&lt;/em>
RewriteEngine On
RewriteCond %{REQUEST_URI} ^/socket.io [NC]
RewriteCond %{QUERY_STRING} transport=websocket [NC]
RewriteRule /(.*) &lt;em>&lt;u>wss://yourdomain.com:30000/$1&lt;/u>&lt;/em> [P,L]
SSLEngine On
SSLProxyEngine on
SSLCertificateFile &lt;em>&lt;u>/root/foundrydata/ssl/yourdomain.crt&lt;/u>&lt;/em>
SSLCertificateKeyFile &lt;em>&lt;u>/root/foundrydata/ssl/yourdomain.key&lt;/u>&lt;/em>
SSLCertificateChainFile &lt;em>&lt;u>/root/foundrydata/ssl/yourdomain_ca.crt&lt;/u>&lt;/em>
Options FollowSymLinks
AllowOverride All
Require all granted
ProxyRequests Off
ProxyPass / "&lt;em>&lt;u>https://yourdomain.com:30000/&lt;/u>&lt;/em>"
ProxyPassReverse / "&lt;em>&lt;u>https://yourdomain.com:30000/&lt;/u>&lt;/em>"
&amp;lt;/VirtualHost&amp;gt;
&lt;/pre>
&lt;p>最后重启apache：
&lt;code>/usr/local/apache/bin/apachectl restart&lt;/code>&lt;/p></description></item><item><title>Deployment: Docker 部署 FoundryVTT 教程</title><link>https://fvtt-cn.github.io/deployment/gettingstarted/docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fvtt-cn.github.io/deployment/gettingstarted/docker/</guid><description>
&lt;p>Foundry VTT 目前拥有若干个来自不同用户实现的 Dockerfile，这些实现中，较为推荐 &lt;a href="https://github.com/felddy/foundryvtt-docker">felddy/foundryvtt&lt;/a> 的镜像。&lt;/p>
&lt;h2 id="介绍">介绍&lt;/h2>
&lt;p>目前可以通过中文社区的自动脚本进行容器化部署，也可以手动启动容器。&lt;/p>
&lt;p>在全新购买的云服务器上使用自动脚本进行部署，最少只需要输入 Foundry VTT 站点上的用户名和密码即可完成，同时脚本也包含了后续更新、维护的方法。&lt;/p>
&lt;h3 id="使用-docker-的优点">使用 Docker 的优点&lt;/h3>
&lt;ul>
&lt;li>无需关心系统环境：只要是主流发行版的 Linux，甚至于 Windows 服务器，只要安装了 Docker，即和其他用户的部署行为一致，难以因系统环境问题出错&lt;/li>
&lt;li>直接使用 Docker 的后台管理：Docker 自己会监控容器内运行的进程状态，如果意外情况导致 FVTT 崩溃，可以不需要 pm2 等进程监控工具即可自动重启、还原&lt;/li>
&lt;li>目前主流的 FVTT 的 Docker 镜像包含内置的自动获取下载地址和授权的脚本，可以简化部署流程&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h3 id="使用-docker-的缺点">使用 Docker 的缺点&lt;/h3>
&lt;ul>
&lt;li>Docker 本身需要安装，同时拉取镜像、容器本身都消耗了一定冗余的存储空间&lt;/li>
&lt;li>如果使用卷挂载，直接访问 FVTT 的数据文件会变得略困难（可以通过 Docker 启动其他容器简化文件访问）&lt;/li>
&lt;li>目前主流的 FVTT 的 Docker 镜像升级时需要重建，而不能通过 FVTT 内置更新&lt;/li>
&lt;li>&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h2 id="安装流程">安装流程&lt;/h2>
&lt;h3 id="自动部署脚本中文社区-使用教程">自动部署脚本（中文社区） 使用教程&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>首先，假设已经登入了 Linux 服务器，并且能够获得 root 权限&lt;/p>
&lt;/li>
&lt;li>
&lt;p>下载脚本&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">wget https://gitee.com/mitchx7/FoundryDeploy/raw/master/fvtt.sh &lt;span style="color:#ce5c00;font-weight:bold">&amp;amp;&amp;amp;&lt;/span> sudo chmod +x fvtt.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>运行脚本，进行安装&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo ./fvtt.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>安装时会检查是否能获取 root 权限，并且如果没有安装 Docker 会自动安装 Docker&lt;/p>
&lt;p>境内服务器下载镜像时会等待较长时间，可以耐心等待&lt;/p>
&lt;/blockquote>
&lt;p>然后脚本会提示输入参数，每条参数输入完成后回车即可，参数包含（✅：必需 | ⭕：可选）：
&lt;img src="https://fvtt-cn.github.io/images/deployment/docker-script-input.png" alt="">&lt;/p>
&lt;ul>
&lt;li>✅ FVTT 账号&lt;/li>
&lt;li>✅ FVTT 密码&lt;/li>
&lt;li>⭕ 版本号
&lt;ul>
&lt;li>直接回车跳过输入版本号，使用最新稳定版即可&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>⭕ 自定义管理密码
&lt;ul>
&lt;li>安装完成后，如果设置了这个密码，需要使用密码才能管理 FVTT，推荐进行设置；回车跳过就不设置密码&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>⭕ FVTT 绑定域名
&lt;ul>
&lt;li>如果为这台服务器绑定了给 FVTT 使用的域名，可以输入，否则直接回车跳过&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>⭕ 使用 Web 文件管理器
&lt;ul>
&lt;li>为了管理文件方便，建议使用。直接回车跳过设置，默认会使用；如果不使用输入&lt;code>n&lt;/code>再回车&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>⭕ 如果使用 Web 文件管理器，可以绑定域名
&lt;ul>
&lt;li>如果需要给 Web 文件管理器绑定域名进行使用，可以输入，否则直接回车跳过&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>确认输入好的参数之后，便可以回车等待部署完成&lt;/p>
&lt;/li>
&lt;li>
&lt;p>部署完成后，脚本会提示如何访问 FVTT，如图所示：
&lt;img src="https://fvtt-cn.github.io/images/deployment/docker-script-result.png" alt="">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>如上图所示的部署完毕后，如果还是不能访问 FVTT，请参见 FAQ 中的&lt;a href="../../../tutorial/faq#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%BE%E7%A4%BA%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F%E5%90%8E%E4%BB%8D%E7%84%B6%E6%97%A0%E6%B3%95%E8%BF%9E%E6%8E%A5-foundryvtt">无法连接&lt;/a>的问题&lt;/p>
&lt;/blockquote>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Tips&lt;/h4>
升级 FVTT 或者修改启动配置，请参见&lt;a href="https://github.com/fvtt-cn/FoundryDeploy">脚本仓库&lt;/a>中的文档
&lt;/div>
&lt;hr>
&lt;h3 id="手动运行-fvtt-容器教程">手动运行 FVTT 容器教程&lt;/h3>
&lt;p>&lt;em>手动更适合希望自定义部署步骤，并且不嫌麻烦的用户&lt;/em>&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">注意&lt;/h4>
&lt;strong>手动运行和自动脚本故意设计为会发生冲突，请只选择其中一种方式部署&lt;/strong>
&lt;/div>
&lt;ol>
&lt;li>
&lt;p>首先，假设已经登入了 Linux 服务器，并且能够获得 root 权限&lt;/p>
&lt;/li>
&lt;li>
&lt;p>确保 Docker 已安装，执行：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">curl -fsSL https://get.docker.com &lt;span style="color:#000;font-weight:bold">|&lt;/span> sudo sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>等待执行完毕就可以进入下一步&lt;/p>
&lt;/li>
&lt;li>
&lt;p>先创建一个 Docker 网桥，执行：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo docker network create caddy_network
&lt;/code>&lt;/pre>&lt;/div>&lt;p>修改下面的命令，然后复制粘贴后执行&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo docker run -d &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--name&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>fvtt &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--restart&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>unless-stopped &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--network&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>caddy_network &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>-v fvtt_data:/data &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>-e &lt;span style="color:#000">FOUNDRY_USERNAME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;FVTT官网用户名&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>-e &lt;span style="color:#000">FOUNDRY_PASSWORD&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;FVTT官网密码&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>-e &lt;span style="color:#000">FOUNDRY_ADMIN_KEY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;设置一个部署完成后管理FVTT的密码&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>felddy/foundryvtt:release
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>需要注意的是，之后访问 FVTT 不要使用任何服务器设置功能来更改选项，会被现在的设置直接覆盖（包括 FVTT 管理密码，但保存的世界、系统、MOD 等等不受影响）&lt;/p>
&lt;p>并且已经屏蔽自动升级功能，需要升级或者修改服务器其他设置的话参见下文（访问域名、端口等修改 Caddy 配置）&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>启动 Caddy
使用 Caddy 作为反代，可以有效降低的 HTTPS 的部署成本，毕竟全自动申请免费的 LetsEncrypt 的 HTTPS 证书且自动更新，无需额外配置&lt;/p>
&lt;p>先绑定好域名，假设绑定到这台机器的域名的是 &lt;code>my.fvtt.com&lt;/code>&lt;/p>
&lt;p>那么执行：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">nano Caddyfile
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后会进入一个编辑文件的界面，在这个界面里，写下 Caddy 的配置文件，可以修改 &lt;code>my.fvtt.com&lt;/code> 后直接复制粘贴，示例如下：&lt;/p>
&lt;pre>&lt;code class="language-Caddyfile" data-lang="Caddyfile">my.fvtt.com &amp;lt;= 修改这个 {
reverse_proxy fvtt:30000 {
header_up Host {host}
header_up X-Real-IP {remote_host}
header_up X-Forwarded-For {remote_host}
header_up X-Forwarded-Proto {scheme}
}
}
&lt;/code>&lt;/pre>&lt;p>无论是否有域名，输入或者粘贴完毕后，按 &lt;kbd>Ctrl+X&lt;/kbd>，会提示是否覆写编辑内容，按 &lt;kbd>y&lt;/kbd> 并且回车确认保存&lt;/p>
&lt;p>接着启动 Caddy 进行反代，执行：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo docker run -d &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--name&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>caddy &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--restart&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>unless-stopped &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--network&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>caddy_network &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>-p 80:80 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>-p 443:443 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>-p 8080:8080 &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>-v cdata:/data &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>-v &lt;span style="color:#000">$PWD&lt;/span>/Caddyfile:/etc/caddy/Caddyfile &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>caddy
&lt;/code>&lt;/pre>&lt;/div>&lt;p>启动后等待不到几秒后（大部分情况下），就应该已经可以访问 FVTT 了，直接在浏览器输入绑定的域名就可以&lt;/p>
&lt;/li>
&lt;li>
&lt;p>启动 FileBrowser（可选）&lt;/p>
&lt;p>我们都知道 FoundryVTT 目前的文件管理非常的麻，比如暂不支持删除、移动等等必需功能&lt;/p>
&lt;p>如果你本来用 Windows Server 部署，那么你还可以远程桌面来试图管理（其实也不是特别方便），如果你使用 Linux 并且像上面一样使用 Docker 来部署，那么就不要考虑直接在用命令移动、删除文件了&lt;/p>
&lt;p>为了解决这个问题，最好的方法是启动一个 Web 文件管理器的 Docker 容器，让它挂载我们的 FVTT 的数据文件，然后我们用浏览器打开这个 Web 文件管理器就可以方便地管理文件&lt;/p>
&lt;p>这里推荐使用基于 Golang 的 FileBrowser，使用足够方便：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo docker run -d &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--name&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>filebrowser &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--restart&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>unless-stopped &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--network&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>caddy_network &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>-v fvtt_data:/srv &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>filebrowser/filebrowser
&lt;/code>&lt;/pre>&lt;/div>&lt;p>建议再给这台运行 FVTT 的机器绑定一个新的域名用于访问文件管理器，例如 &lt;code>file.fvtt.com&lt;/code>，然后修改 Caddyfile 让 Caddy 也反代 FileBrowser，执行：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">nano Caddyfile
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后用方向键调整到末尾，可以修改 &lt;code>file.fvtt.com&lt;/code> 后直接粘贴到文件末尾，示例如下：&lt;/p>
&lt;pre>&lt;code class="language-Caddyfile" data-lang="Caddyfile">file.fvtt.com {
reverse_proxy filebrowser:80 {
header_up Host {host}
header_up X-Real-IP {remote_host}
header_up X-Forwarded-For {remote_host}
header_up X-Forwarded-Proto {scheme}
}
}
&lt;/code>&lt;/pre>&lt;p>同样在输入或者粘贴完毕后，按 &lt;kbd>Ctrl+X&lt;/kbd> 然后按 &lt;kbd>y&lt;/kbd> 并且回车确认保存&lt;/p>
&lt;p>接着，重启 Caddy 以使其启用对 FileBrowser 的反代：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo docker restart caddy
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>升级 FVTT 版本或者修改配置
先移除正在运行的 FVTT 的容器，执行：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo docker rm -f fvtt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>并且更新 FVTT 镜像，执行：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo docker pull felddy/foundryvtt:release
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后执行和启动时一模一样的命令：&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">sudo docker run -d &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--name&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>fvtt &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--restart&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>unless-stopped &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>--network&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>caddy_network &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>-v fvtt_data:/data &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>-e &lt;span style="color:#000">FOUNDRY_USERNAME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;FVTT官网用户名&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>-e &lt;span style="color:#000">FOUNDRY_USERNAME&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;FVTT官网密码&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>-e &lt;span style="color:#000">FOUNDRY_ADMIN_KEY&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;设置一个部署完成后管理FVTT的密码&amp;#39;&lt;/span> &lt;span style="color:#4e9a06">\
&lt;/span>&lt;span style="color:#4e9a06">&lt;/span>felddy/foundryvtt:release
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol></description></item><item><title>Deployment: Windows 部署 FoundryVTT 教程</title><link>https://fvtt-cn.github.io/deployment/gettingstarted/windows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://fvtt-cn.github.io/deployment/gettingstarted/windows/</guid><description>
&lt;blockquote>
&lt;p>本篇教程参考 FVTT 英文社群网站 &lt;a href="https://foundry-vtt-community.github.io/wiki/Windows/">Windows 托管教程&lt;/a>和&lt;a href="http://www.goddessfantasy.net/bbs/index.php?topic=117014.0">猫斯基的 Windows Server 部署教程&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;p>如果你没有公网 IP，又不缺一台服务器的钱，那么你可以考虑租一台服务器并架设一个 FoundryVTT 在上面。&lt;/p>
&lt;p>服务器有数种系统，例如 Windows、Linux、MacOS、Ubantu 等。本教程以 Windows 系统为例。&lt;/p>
&lt;p>那么我们假设你已经购买了服务器，并且安装好了 Windows Server 系统，连接上了&lt;strong>远程桌面&lt;/strong>，接下来就进行部署：&lt;/p>
&lt;h2 id="基础配置">基础配置&lt;/h2>
&lt;ol>
&lt;li>下载并安装 Node.js，在 &lt;a href="https://nodejs.org/zh-cn/download/">Node.js 官网安装页面&lt;/a>上，点击 Windows 安装包下载&lt;/li>
&lt;li>将 Node.js 安装包通过 &lt;em>远程桌面&lt;/em> 复制到服务器上，然后在服务器上点击安装包文件，一路确认，安装 Node.js&lt;/li>
&lt;li>从 &lt;a href="https://foundryvtt.com/">Foundry VTT 官网&lt;/a>上下载最新包，使用 Node.js 部署，所以选择第四项
&lt;ul>
&lt;li>&lt;img src="https://fvtt-cn.github.io/images/deployment/download-url.png" alt="">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>将压缩包通过 &lt;em>远程桌面&lt;/em> 复制到服务器上，直接拖拽或者 &lt;kbd>Ctrl+C/V&lt;/kbd> 均可，然后解压到某文件夹内（比如桌面）&lt;/li>
&lt;li>在这个目录下，启动 CMD。如图所示，在资源管理器地址栏下输入 &lt;code>cmd&lt;/code>，然后回车打开 CMD 窗口
&lt;ul>
&lt;li>&lt;img src="https://fvtt-cn.github.io/images/deployment/win-unzip-cmd.png" alt="">&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>接着运行这个命令
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="color:#000">node&lt;/span> &lt;span style="color:#000;font-weight:bold">.\&lt;/span>&lt;span style="color:#000">resources&lt;/span>&lt;span style="color:#000;font-weight:bold">\&lt;/span>&lt;span style="color:#000">app&lt;/span>&lt;span style="color:#000;font-weight:bold">\&lt;/span>&lt;span style="color:#000">main&lt;/span>&lt;span style="color:#000;font-weight:bold">.&lt;/span>&lt;span style="color:#000">js&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>如果能够看到进行了类似以下的输出，那么证明启动成功。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-bash" data-lang="bash">FoundryVTT &lt;span style="color:#000;font-weight:bold">|&lt;/span> 2020-08-15 14:50:37 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>info&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Foundry Virtual Tabletop - Version 0.6.5
FoundryVTT &lt;span style="color:#000;font-weight:bold">|&lt;/span> 2020-08-15 14:50:37 &lt;span style="color:#000;font-weight:bold">|&lt;/span> &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>info&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span> Running on Node.js - Version 14.8.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在自己电脑的浏览器上输入 &lt;code>http://[服务器IP]:30000&lt;/code> 即可访问 FVTT，然后就可以把远程桌面关闭了。&lt;/p>
&lt;h3 id="在腾讯云-windows-server-服务器上部署的教程视频">在腾讯云 Windows Server 服务器上部署的教程视频&lt;/h3>
&lt;blockquote>
&lt;p>从 26:12 秒开始是部署过程&lt;/p>
&lt;/blockquote>
&lt;style>
.aspect-ratio {
position: relative;
width: 100%;
height: 0;
padding-bottom: 75%;
}
.aspect-ratio iframe {
position: absolute;
width: 100%;
height: 100%;
left: 0;
top: 0;
}
&lt;/style>
&lt;div class="aspect-ratio">
&lt;iframe src="https://player.bilibili.com/player.html?bvid=BV1gE411A7c4&amp;t=0h26m12s&amp;page=1&amp;as_wide=1&amp;high_quality=1&amp;danmaku=0"
scrolling="no"
frameborder="no"
framespacing="0"
allowfullscreen="true">
&lt;/iframe>
&lt;/div></description></item></channel></rss>